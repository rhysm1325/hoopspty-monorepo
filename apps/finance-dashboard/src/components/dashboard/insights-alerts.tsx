'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import {
  Alert,
  AlertDescription,
  AlertTitle,
} from '@/components/ui/alert'
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from '@/components/ui/collapsible'
import {
  TrendingUp,
  TrendingDown,
  AlertTriangle,
  CheckCircle,
  Info,
  Zap,
  Target,
  Eye,
  RefreshCw,
  ChevronDown,
  ChevronUp,
  Lightbulb,
  DollarSign,
  Clock,
  Users,
  Building2,
  BarChart3,
  PieChart,
} from 'lucide-react'
import { formatCurrency, formatPercentage } from '@/utils/financial'
import type { RevenueStream } from '@/types'

interface FinancialInsight {
  id: string
  type: 'positive' | 'negative' | 'neutral' | 'warning' | 'critical'
  category: 'revenue' | 'cash_flow' | 'collections' | 'payments' | 'margins' | 'working_capital' | 'general'
  priority: 'low' | 'medium' | 'high' | 'critical'
  title: string
  description: string
  impact: string
  recommendation?: string
  actionRequired: boolean
  actionItems?: string[]
  relatedMetrics: {
    current: number
    target?: number
    prior?: number
    variance?: number
    variancePercent?: number
  }
  trend: 'improving' | 'declining' | 'stable'
  confidence: 'low' | 'medium' | 'high'
  lastUpdated: Date
  expiresAt?: Date
}

interface VarianceAlert {
  id: string
  metric: string
  category: string
  currentValue: number
  expectedValue: number
  variance: number
  variancePercent: number
  threshold: number
  severity: 'info' | 'warning' | 'critical'
  trend: 'improving' | 'declining' | 'stable'
  description: string
  recommendation: string
  autoGenerated: boolean
}

interface InsightsAlertsProps {
  showExpanded?: boolean
  maxInsights?: number
  autoRefresh?: boolean
  className?: string
}

export function InsightsAlerts({ 
  showExpanded = true, 
  maxInsights = 10,
  autoRefresh = true,
  className 
}: InsightsAlertsProps) {
  const [insights, setInsights] = useState<FinancialInsight[]>([])
  const [alerts, setAlerts] = useState<VarianceAlert[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [expandedInsights, setExpandedInsights] = useState<Set<string>>(new Set())
  const [selectedCategory, setSelectedCategory] = useState<string>('all')

  useEffect(() => {
    loadInsightsAndAlerts()
    
    if (autoRefresh) {
      const interval = setInterval(() => {
        loadInsightsAndAlerts()
      }, 5 * 60 * 1000) // Refresh every 5 minutes
      
      return () => clearInterval(interval)
    }
  }, [autoRefresh])

  const loadInsightsAndAlerts = async () => {
    setIsLoading(true)
    setError(null)

    try {
      // In real implementation, this would call the insights analysis server action
      // For now, simulate with sample data based on dashboard metrics
      await new Promise(resolve => setTimeout(resolve, 600))

      const sampleInsights: FinancialInsight[] = [
        {
          id: 'insight1',
          type: 'positive',
          category: 'revenue',
          priority: 'high',
          title: 'Tours Revenue Exceeding Expectations',
          description: 'Tours revenue is up 12.4% YTD vs prior year, driven by strong Q2 performance',
          impact: 'Additional $29,800 in revenue vs budget, contributing to improved cash flow',
          recommendation: 'Consider increasing marketing spend for tours to capitalize on momentum',
          actionRequired: false,
          actionItems: [
            'Review tour capacity for peak season',
            'Analyze successful marketing channels',
            'Consider expanding tour offerings'
          ],
          relatedMetrics: {
            current: 266963,
            prior: 237200,
            variance: 29763,
            variancePercent: 12.4,
          },
          trend: 'improving',
          confidence: 'high',
          lastUpdated: new Date(),
        },
        {
          id: 'insight2',
          type: 'warning',
          category: 'collections',
          priority: 'critical',
          title: 'Collection Issues with Dr Dish Customers',
          description: 'Dr Dish customer DSO has increased to 48.9 days, well above target of 30 days',
          impact: 'Approximately $8,950 tied up in overdue receivables, affecting cash flow',
          recommendation: 'Implement stricter collection procedures for Dr Dish sales',
          actionRequired: true,
          actionItems: [
            'Contact overdue Dr Dish customers immediately',
            'Review credit terms for equipment sales',
            'Consider requiring deposits for large orders'
          ],
          relatedMetrics: {
            current: 48.9,
            target: 30.0,
            variance: 18.9,
            variancePercent: 63.0,
          },
          trend: 'declining',
          confidence: 'high',
          lastUpdated: new Date(),
        },
        {
          id: 'insight3',
          type: 'positive',
          category: 'cash_flow',
          priority: 'medium',
          title: 'Excellent Cash Conversion Cycle',
          description: 'Negative cash conversion cycle of -16.1 days generates positive cash flow',
          impact: 'Business collects cash before paying suppliers, improving working capital efficiency',
          recommendation: 'Maintain current collection and payment practices',
          actionRequired: false,
          relatedMetrics: {
            current: -16.1,
            target: -10.0,
            variance: -6.1,
            variancePercent: -61.0,
          },
          trend: 'stable',
          confidence: 'high',
          lastUpdated: new Date(),
        },
        {
          id: 'insight4',
          type: 'critical',
          category: 'payments',
          priority: 'critical',
          title: 'Strategic Supplier Payment Overdue',
          description: 'Flight Centre Business (strategic supplier) has bills 78 days overdue',
          impact: 'Risk of damaging relationship with key flight booking partner',
          recommendation: 'Prioritize immediate payment to maintain strategic relationship',
          actionRequired: true,
          actionItems: [
            'Process payment for Flight Centre immediately',
            'Contact supplier to explain delay',
            'Review payment approval processes'
          ],
          relatedMetrics: {
            current: 78,
            target: 30,
            variance: 48,
            variancePercent: 160.0,
          },
          trend: 'declining',
          confidence: 'high',
          lastUpdated: new Date(),
        },
        {
          id: 'insight5',
          type: 'positive',
          category: 'margins',
          priority: 'medium',
          title: 'Gross Margin Performance Strong',
          description: 'Overall gross margin of 94.1% exceeds target of 92.0%',
          impact: 'Additional $6,800 in gross profit vs target, improving bottom line',
          recommendation: 'Analyze successful cost management practices for replication',
          actionRequired: false,
          relatedMetrics: {
            current: 94.1,
            target: 92.0,
            variance: 2.1,
            variancePercent: 2.3,
          },
          trend: 'improving',
          confidence: 'medium',
          lastUpdated: new Date(),
        },
        {
          id: 'insight6',
          type: 'warning',
          category: 'working_capital',
          priority: 'medium',
          title: 'DPO Declining Below Target',
          description: 'Days Payable Outstanding has decreased to 28.4 days vs target of 30 days',
          impact: 'Paying suppliers faster than optimal, reducing available cash float',
          recommendation: 'Review payment processes and consider extending payment terms where possible',
          actionRequired: false,
          actionItems: [
            'Negotiate extended payment terms with key suppliers',
            'Review payment approval workflow timing',
            'Consider payment scheduling optimization'
          ],
          relatedMetrics: {
            current: 28.4,
            target: 30.0,
            variance: -1.6,
            variancePercent: -5.3,
          },
          trend: 'declining',
          confidence: 'medium',
          lastUpdated: new Date(),
        },
      ]

      const sampleAlerts: VarianceAlert[] = [
        {
          id: 'alert1',
          metric: 'Cash Position',
          category: 'cash_flow',
          currentValue: 284295,
          expectedValue: 250000,
          variance: 34295,
          variancePercent: 13.7,
          threshold: 10.0,
          severity: 'info',
          trend: 'improving',
          description: 'Cash position is 13.7% above expected levels',
          recommendation: 'Consider investment opportunities or debt reduction',
          autoGenerated: true,
        },
        {
          id: 'alert2',
          metric: 'AR Outstanding',
          category: 'collections',
          currentValue: 45280,
          expectedValue: 35000,
          variance: 10280,
          variancePercent: 29.4,
          threshold: 15.0,
          severity: 'warning',
          trend: 'declining',
          description: 'Accounts receivable is 29.4% above expected levels',
          recommendation: 'Accelerate collection efforts and review credit policies',
          autoGenerated: true,
        },
        {
          id: 'alert3',
          metric: 'Net Profit Margin',
          category: 'margins',
          currentValue: 15.1,
          expectedValue: 14.0,
          variance: 1.1,
          variancePercent: 7.9,
          threshold: 5.0,
          severity: 'info',
          trend: 'improving',
          description: 'Net profit margin is 7.9% above target',
          recommendation: 'Excellent performance - maintain current cost management',
          autoGenerated: true,
        },
      ]

      setInsights(sampleInsights)
      setAlerts(sampleAlerts)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load insights and alerts')
    } finally {
      setIsLoading(false)
    }
  }

  const handleRefresh = () => {
    loadInsightsAndAlerts()
  }

  const toggleInsightExpansion = (insightId: string) => {
    const newExpanded = new Set(expandedInsights)
    if (newExpanded.has(insightId)) {
      newExpanded.delete(insightId)
    } else {
      newExpanded.add(insightId)
    }
    setExpandedInsights(newExpanded)
  }

  const getInsightIcon = (type: FinancialInsight['type']) => {
    switch (type) {
      case 'positive': return <CheckCircle className="h-5 w-5 text-green-600" />
      case 'negative': return <AlertTriangle className="h-5 w-5 text-red-600" />
      case 'warning': return <AlertTriangle className="h-5 w-5 text-amber-600" />
      case 'critical': return <Zap className="h-5 w-5 text-red-600" />
      case 'neutral': return <Info className="h-5 w-5 text-blue-600" />
      default: return <Info className="h-5 w-5 text-gray-600" />
    }
  }

  const getInsightColor = (type: FinancialInsight['type']) => {
    switch (type) {
      case 'positive': return 'bg-green-50 border-green-200'
      case 'negative': return 'bg-red-50 border-red-200'
      case 'warning': return 'bg-amber-50 border-amber-200'
      case 'critical': return 'bg-red-100 border-red-300'
      case 'neutral': return 'bg-blue-50 border-blue-200'
      default: return 'bg-gray-50 border-gray-200'
    }
  }

  const getInsightTextColor = (type: FinancialInsight['type']) => {
    switch (type) {
      case 'positive': return 'text-green-800'
      case 'negative': return 'text-red-800'
      case 'warning': return 'text-amber-800'
      case 'critical': return 'text-red-900'
      case 'neutral': return 'text-blue-800'
      default: return 'text-gray-800'
    }
  }

  const getPriorityBadge = (priority: FinancialInsight['priority']) => {
    switch (priority) {
      case 'critical': return <Badge variant="destructive" className="text-xs">Critical</Badge>
      case 'high': return <Badge variant="secondary" className="text-xs">High</Badge>
      case 'medium': return <Badge variant="outline" className="text-xs">Medium</Badge>
      case 'low': return <Badge variant="outline" className="text-xs bg-gray-100">Low</Badge>
      default: return <Badge variant="outline" className="text-xs">Unknown</Badge>
    }
  }

  const getCategoryIcon = (category: FinancialInsight['category']) => {
    switch (category) {
      case 'revenue': return <BarChart3 className="h-4 w-4" />
      case 'cash_flow': return <DollarSign className="h-4 w-4" />
      case 'collections': return <Users className="h-4 w-4" />
      case 'payments': return <Building2 className="h-4 w-4" />
      case 'margins': return <PieChart className="h-4 w-4" />
      case 'working_capital': return <Clock className="h-4 w-4" />
      default: return <Info className="h-4 w-4" />
    }
  }

  const filteredInsights = selectedCategory === 'all' 
    ? insights 
    : insights.filter(insight => insight.category === selectedCategory)

  const prioritizedInsights = filteredInsights
    .sort((a, b) => {
      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 }
      return priorityOrder[b.priority] - priorityOrder[a.priority]
    })
    .slice(0, maxInsights)

  const criticalAlerts = alerts.filter(alert => alert.severity === 'critical')
  const warningAlerts = alerts.filter(alert => alert.severity === 'warning')

  if (isLoading) {
    return (
      <Card className={className}>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Lightbulb className="mr-2 h-5 w-5" />
            Financial Insights
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {Array.from({ length: 3 }).map((_, i) => (
              <div key={i} className="h-16 w-full animate-pulse rounded bg-gray-200" />
            ))}
          </div>
        </CardContent>
      </Card>
    )
  }

  if (error) {
    return (
      <Card className={className}>
        <CardContent className="pt-6">
          <div className="text-center text-red-600">
            <Lightbulb className="mx-auto h-8 w-8" />
            <p className="mt-2 text-sm">{error}</p>
            <Button variant="outline" size="sm" onClick={handleRefresh} className="mt-2">
              Try Again
            </Button>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className={className}>
      {/* Critical Alerts Banner */}
      {criticalAlerts.length > 0 && (
        <Alert className="mb-6 border-red-300 bg-red-50">
          <Zap className="h-4 w-4 text-red-600" />
          <AlertTitle className="text-red-800">Critical Financial Alerts</AlertTitle>
          <AlertDescription className="text-red-700">
            {criticalAlerts.length} critical variance{criticalAlerts.length > 1 ? 's' : ''} detected requiring immediate attention.
            <Button variant="outline" size="sm" className="ml-2 text-red-700 border-red-300">
              <Eye className="mr-2 h-3 w-3" />
              Review All
            </Button>
          </AlertDescription>
        </Alert>
      )}

      {/* Main Insights Card */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center">
                <Lightbulb className="mr-2 h-5 w-5" />
                Financial Insights & Alerts
              </CardTitle>
              <CardDescription>
                AI-powered analysis of significant variances and trends
              </CardDescription>
            </div>
            <div className="flex items-center gap-2">
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="rounded border border-gray-300 px-2 py-1 text-sm"
              >
                <option value="all">All Categories</option>
                <option value="revenue">Revenue</option>
                <option value="cash_flow">Cash Flow</option>
                <option value="collections">Collections</option>
                <option value="payments">Payments</option>
                <option value="margins">Margins</option>
                <option value="working_capital">Working Capital</option>
              </select>
              <Button
                variant="ghost"
                size="sm"
                onClick={handleRefresh}
                disabled={isLoading}
              >
                <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
              </Button>
            </div>
          </div>
        </CardHeader>
        
        <CardContent className="space-y-4">
          {/* Insights Summary */}
          <div className="grid grid-cols-1 gap-4 md:grid-cols-4">
            <div className="rounded-lg border p-3">
              <div className="flex items-center gap-2">
                <CheckCircle className="h-4 w-4 text-green-600" />
                <span className="text-sm font-medium">Positive</span>
              </div>
              <p className="mt-1 text-lg font-bold text-green-900">
                {insights.filter(i => i.type === 'positive').length}
              </p>
            </div>

            <div className="rounded-lg border p-3">
              <div className="flex items-center gap-2">
                <AlertTriangle className="h-4 w-4 text-amber-600" />
                <span className="text-sm font-medium">Warnings</span>
              </div>
              <p className="mt-1 text-lg font-bold text-amber-900">
                {insights.filter(i => i.type === 'warning').length}
              </p>
            </div>

            <div className="rounded-lg border p-3">
              <div className="flex items-center gap-2">
                <Zap className="h-4 w-4 text-red-600" />
                <span className="text-sm font-medium">Critical</span>
              </div>
              <p className="mt-1 text-lg font-bold text-red-900">
                {insights.filter(i => i.type === 'critical').length}
              </p>
            </div>

            <div className="rounded-lg border p-3">
              <div className="flex items-center gap-2">
                <Target className="h-4 w-4 text-blue-600" />
                <span className="text-sm font-medium">Action Required</span>
              </div>
              <p className="mt-1 text-lg font-bold text-blue-900">
                {insights.filter(i => i.actionRequired).length}
              </p>
            </div>
          </div>

          {/* Insights List */}
          <div className="space-y-3">
            {prioritizedInsights.map((insight) => (
              <Collapsible key={insight.id}>
                <div className={`rounded-lg border p-4 ${getInsightColor(insight.type)}`}>
                  <CollapsibleTrigger
                    className="flex w-full items-center justify-between text-left"
                    onClick={() => toggleInsightExpansion(insight.id)}
                  >
                    <div className="flex items-center gap-3">
                      {getInsightIcon(insight.type)}
                      <div>
                        <div className="flex items-center gap-2">
                          <span className={`font-medium ${getInsightTextColor(insight.type)}`}>
                            {insight.title}
                          </span>
                          {getPriorityBadge(insight.priority)}
                          {insight.actionRequired && (
                            <Badge variant="destructive" className="text-xs">
                              Action Required
                            </Badge>
                          )}
                        </div>
                        <p className={`text-sm ${getInsightTextColor(insight.type)} opacity-80`}>
                          {insight.description}
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      {getCategoryIcon(insight.category)}
                      {expandedInsights.has(insight.id) ? (
                        <ChevronUp className="h-4 w-4" />
                      ) : (
                        <ChevronDown className="h-4 w-4" />
                      )}
                    </div>
                  </CollapsibleTrigger>
                  
                  <CollapsibleContent className="mt-4">
                    <div className="space-y-4">
                      {/* Impact and Metrics */}
                      <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                        <div>
                          <h5 className="mb-2 text-sm font-medium">Business Impact</h5>
                          <p className="text-sm text-gray-700">{insight.impact}</p>
                        </div>
                        
                        <div>
                          <h5 className="mb-2 text-sm font-medium">Key Metrics</h5>
                          <div className="space-y-1 text-sm">
                            <div className="flex items-center justify-between">
                              <span className="text-gray-500">Current:</span>
                              <span className="font-medium">
                                {typeof insight.relatedMetrics.current === 'number' && insight.relatedMetrics.current > 1000
                                  ? formatCurrency(insight.relatedMetrics.current)
                                  : `${insight.relatedMetrics.current}${insight.category === 'margins' || insight.category === 'working_capital' ? '%' : ''}`
                                }
                              </span>
                            </div>
                            {insight.relatedMetrics.target && (
                              <div className="flex items-center justify-between">
                                <span className="text-gray-500">Target:</span>
                                <span className="font-medium">
                                  {typeof insight.relatedMetrics.target === 'number' && insight.relatedMetrics.target > 1000
                                    ? formatCurrency(insight.relatedMetrics.target)
                                    : `${insight.relatedMetrics.target}${insight.category === 'margins' || insight.category === 'working_capital' ? '%' : ''}`
                                  }
                                </span>
                              </div>
                            )}
                            {insight.relatedMetrics.variancePercent && (
                              <div className="flex items-center justify-between">
                                <span className="text-gray-500">Variance:</span>
                                <span className={`font-medium ${
                                  insight.relatedMetrics.variancePercent > 0 ? 'text-green-600' : 'text-red-600'
                                }`}>
                                  {insight.relatedMetrics.variancePercent > 0 ? '+' : ''}{insight.relatedMetrics.variancePercent.toFixed(1)}%
                                </span>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>

                      {/* Recommendation */}
                      {insight.recommendation && (
                        <div>
                          <h5 className="mb-2 text-sm font-medium">Recommendation</h5>
                          <p className="text-sm text-gray-700">{insight.recommendation}</p>
                        </div>
                      )}

                      {/* Action Items */}
                      {insight.actionItems && insight.actionItems.length > 0 && (
                        <div>
                          <h5 className="mb-2 text-sm font-medium">Action Items</h5>
                          <ul className="space-y-1">
                            {insight.actionItems.map((item, index) => (
                              <li key={index} className="flex items-center gap-2 text-sm">
                                <div className="h-1.5 w-1.5 rounded-full bg-gray-400" />
                                {item}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}

                      {/* Confidence and Trend */}
                      <div className="flex items-center justify-between text-xs text-gray-500">
                        <div className="flex items-center gap-4">
                          <span>Confidence: {insight.confidence}</span>
                          <span>Trend: {insight.trend}</span>
                          <span>Updated: {insight.lastUpdated.toLocaleTimeString()}</span>
                        </div>
                        {insight.actionRequired && (
                          <Button size="sm" variant="outline">
                            Take Action
                          </Button>
                        )}
                      </div>
                    </div>
                  </CollapsibleContent>
                </div>
              </Collapsible>
            ))}
          </div>

          {/* Variance Alerts */}
          {alerts.length > 0 && (
            <div>
              <h4 className="mb-3 text-sm font-medium text-gray-900">Variance Alerts</h4>
              <div className="space-y-2">
                {alerts.map((alert) => (
                  <div
                    key={alert.id}
                    className={`rounded-lg border p-3 ${
                      alert.severity === 'critical' ? 'bg-red-50 border-red-200' :
                      alert.severity === 'warning' ? 'bg-amber-50 border-amber-200' :
                      'bg-blue-50 border-blue-200'
                    }`}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        {alert.severity === 'critical' ? (
                          <Zap className="h-4 w-4 text-red-600" />
                        ) : alert.severity === 'warning' ? (
                          <AlertTriangle className="h-4 w-4 text-amber-600" />
                        ) : (
                          <Info className="h-4 w-4 text-blue-600" />
                        )}
                        <span className={`text-sm font-medium ${
                          alert.severity === 'critical' ? 'text-red-800' :
                          alert.severity === 'warning' ? 'text-amber-800' :
                          'text-blue-800'
                        }`}>
                          {alert.metric}
                        </span>
                      </div>
                      <Badge 
                        variant={alert.severity === 'critical' ? 'destructive' : 'outline'}
                        className="text-xs"
                      >
                        {alert.variancePercent > 0 ? '+' : ''}{alert.variancePercent.toFixed(1)}%
                      </Badge>
                    </div>
                    
                    <p className={`mt-1 text-sm ${
                      alert.severity === 'critical' ? 'text-red-700' :
                      alert.severity === 'warning' ? 'text-amber-700' :
                      'text-blue-700'
                    }`}>
                      {alert.description}
                    </p>
                    
                    <p className={`mt-1 text-xs ${
                      alert.severity === 'critical' ? 'text-red-600' :
                      alert.severity === 'warning' ? 'text-amber-600' :
                      'text-blue-600'
                    }`}>
                      Recommendation: {alert.recommendation}
                    </p>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* No Insights Message */}
          {prioritizedInsights.length === 0 && (
            <div className="text-center py-8">
              <CheckCircle className="mx-auto h-12 w-12 text-green-500 mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">All Systems Normal</h3>
              <p className="text-gray-600">
                No significant variances or alerts detected. Your financial metrics are performing within expected ranges.
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
